import re
def normalize(text: str, *, casefold: bool = True, yo2e: bool = True) -> str:
    if not text:
        return []
    if casefold == True:
        text = text.casefold()
    if yo2e == True:
        text = text.replace('—ë', '–µ').replace('–Å', '–ï')
    text = re.sub("[^a-z–∞-—è—ë0-9\s]","", text) # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r'\s+', ' ', text).strip()
    return text

if __name__ == "__main__":
    test_cases = [
        "–ü—Ä–ò–≤–ï—Ç\n–ú–ò—Ä\t",
        "—ë–∂–∏–∫, –Å–ª–∫–∞" ,
        "Hello\r\nWorld",
        "  –¥–≤–æ–π–Ω—ã–µ   –ø—Ä–æ–±–µ–ª—ã  "
    ]
    print('\n–¢–µ—Å—Ç normalize:')
    for test in test_cases:
        print(f"{normalize(test, casefold= True, yo2e = True)}")


def tokenize(text:str) -> list[str]:
    if not text:
        return []
    word = r'\b\w+(?:-\w+)*\b' # —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫—É –∑–∞–¥–∞–µ–º –∫–∞–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–æ
    tokens = re.findall(word, text)
    return tokens

if __name__ == '__main__':
    test_cases = [
        "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä",
        "hello,world!!!",
        "–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∫—Ä—É—Ç–æ",
        "2025 –≥–æ–¥",
        "emoji üòÄ –Ω–µ —Å–ª–æ–≤–æ"
    ]
    print("\n–¢–µ—Å—Ç –Ω–∞ tokenize")
    for test in test_cases:
        print(f"{tokenize(test)}")


def count_freq(tokens: list[str]) -> dict[str, int]:
    dictionary = {}
    for token in tokens:
        dictionary[token] = dictionary.get(token, 0) + 1
    return dictionary

if __name__ == '__main__':
    test_cases = [
        "a","b","a","c","b","a"
        ]
    print("\n–¢–µ—Å—Ç –Ω–∞ count_freq")
    print(count_freq(test_cases))


def top_n(freq: dict[str, int], n: int = None) -> list[str, int]:
    items = sorted(freq.items(), key= lambda x: (-x[1], x[0])) 
    return items[:n]

if __name__ == '__main__':
    test_cases = [
        'aa bb b b d b b d a a'
        ]
    print('\n–¢–µ—Å—Ç –Ω–∞ top_words:')
    for test in test_cases:
        normalized = normalize(test)
        tokens = tokenize(normalized)
        freq = count_freq(tokens)
        top_words = top_n(freq,3)
    print(top_words)